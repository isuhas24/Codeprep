<resources>
    <string name="app_name">Major Project</string>
    <string name="mobility_companies_heading">Mobility Companies</string>
    <string name="crm_companies_heading">CRM Companies</string>
    <string name="cloud_companies_heading">Cloud services Companies</string>
    <string name="collaboration_companies_heading">Collaboration Tools Companies</string>
    <string name="communication_companies_heading">Communication Companies</string>
    <string name="advertisement_companies_heading">Advertisement Companies</string>
    <string name="payment_companies_heading">Payment Companies</string>
    <string name="trading_companies_heading">Trading Companies</string>
    <string name="investment_companies_heading">Investment Banks</string>
    <string name="gaming_companies_heading">Gaming Companies</string>
    <string name="entertainment_companies_heading">Entertainment Companies</string>
    <string name="system_design_heading">System Design</string>
    <string name="programming_languages_heading">Programming Languages</string>
    <string name="dsa_heading">Data Structures and Algorithms</string>
    <string name="oops_heading">Object Oriented Programming</string>
    <string name="dbms_heading">Database Management System</string>
    <string name="os_heading">Operating System</string>
    <string name="se_heading">Software Engineering</string>
    <string name="cn_heading">Computer Networks</string>
    <string name="github_heading">GitHub</string>
    <string name="sde_sheet_heading">SDE Sheet</string>
    <string name="web_development_heading">Web Development</string>
    <string name="leetcode_solutions_heading">Leetcode Solutions</string>
    <string name="coding_practices_heading">Coding Patterns and Practices</string>
    <string name="tips_heading">Tips</string>
    <string name="questions_heading">Most Important Coding Questions</string>
    <string name="c_programming_heading">C Programming</string>
    <string name="cpp_programming_heading">C++ Programming</string>
    <string name="java_programming_heading">Java Programming</string>
    <string name="python_programming_heading">Python Programming</string>
    <string name="dbms_resources_heading">DBMS Resources</string>
    <string name="sql_resources_heading">SQL Resources</string>
    <string name="html_and_css_heading">HTML AND CSS</string>
    <string name="javascript_heading">JavaScript</string>
    <string name="react_heading">React</string>
    <string name="nodejs_heading">Node JS</string>
    <string name="mongodb_heading">Mongo DB</string>
    <string name="array_heading">Arrays</string>
    <string name="bit_manipulation_heading">Bit Manipulation</string>
    <string name="dynamic_programming_heading">Dynamic Programming</string>
    <string name="graphs_heading">Graphs</string>
    <string name="greedy_heading">Greedy</string>
    <string name="linked_list_heading">Linked List</string>
    <string name="backtracking_heading">Recursion and Backtracking</string>
    <string name="stacks_and_queues_heading">Stack and Queue</string>
    <string name="about_mobility_companies">
        <b>=></b> Mobility is the industry of transporting people and goods.\n
        <b>=></b> Revenue in the Ride-hailing and Taxi segment is projected to reach US$12.77bn in 2023.\n
        <b>=></b> Revenue is expected to show an annual growth rate (2023-2027) of 0.12%, resulting in a projected market volume of US$12.83bn by 2027.
    </string>
    <string name="about_Ecommerce_companies">
        <b>=></b> E-commerce or Electronic commerce is the trading of goods and services on the Internet.\n
        <b>=></b> The global ecommerce growth rate for 2023 is forecast at 10.4% ,bring global ecommerce sales worldwide to $6.3 trillion.\n
        <b>=></b> India is the 8th largest market for ecommerce with a predicted revenue of US$79,923.8 million by 2023.
    </string>
    <string name="about_crm_companies">
        <b>=></b> A CRM company essentially provides a central place where businesses can store customer and prospect data, track customer interactions, and share this information with colleagues.\n
        <b>=></b> They allow businesses to manage relationships with customers, helping the business to grow.\n
    </string>
    <string name="about_cloud_companies">
        <b>=></b> Cloud service provider companies use their own data centers and compute resources to host cloud computing-based infrastructure and platform services for customer organizations.\n
        <b>=></b> Cloud services are typically priced using various pay-as-you-go subscription models.
    </string>
    <string name="about_collaboration_companies">
        <b>=></b> Collaboration tools enable employees to work together on a project without being in the same location.\n
        <b>=></b> Online collaboration tools are apps, software programs, or platforms that help businesses and their people streamline the creative process, and work together more effectively, and efficiently.
    </string>
    <string name="about_communication_companies">
        <b>=></b> They provide programmable communication tools for making and receiving text messages, and performing other communication functions using its web services APIs.\n
        <b>=></b> They are a customer engagement platform used by hundreds of thousands of businesses and more than ten million developers worldwide to build unique, personalized experiences for their customers.
    </string>
    <string name="about_advertisement_companies">
        <b>=></b> Advertising companies focus on providing monetization products to digital publishers.\n
        <b>=></b> The services include search, display, native, video, and mobile advertising to monetize publishers inventory.
    </string>
    <string name="about_payment_companies">
        <b>=></b> A payment service provider is a third-party company that assists businesses to accept electronic payments, such as credit cards and debit cards payments.\n
        <b>=></b> PSPs act as intermediaries between those who make payments, i.e. consumers, and those who accept them, i.e. retailers.\n
        <b>=></b> The global payment as a service market size was valued at USD 13.88 billion in 2022 and is expected to expand at a compound annual growth rate (CAGR) of 15.2% from 2023 to 2030.
    </string>
    <string name="about_trading_companies">
        <b>=></b> They are investment platforms that offers a new way of investing money with stockbroking and direct mutual funds.\n
        <b>=></b> They provide user interface to make investing easy, accessible, transparent, and paperless, enabling users to invest in mutual funds without any hassles.
    </string>
    <string name="about_investment_companies">
        <b>=></b> They are leading global investment banking, securities and investment management firm that provides a wide range of financial services to a substantial and diversified client base.\n
        <b>=></b> They are leaders in investment banking, financial services for consumers and small business, commercial banking, financial transactions processing and asset management.
    </string>
    <string name="about_gaming_companies">
        <b>=></b> They provide a fantasy gaming platform for multiple sports such as fantasy cricket, football, basketball, kabaddi, hockey, volleyball, handball and baseball.\n
        <b>=></b> It is an online game where users create a virtual team of real-life players and earn points based on the performances of these players in real matches.
    </string>
    <string name="about_entertainment_companies">
        <b>=></b> These are subscription-based streaming services that allows their members to watch TV shows and movies on an internet-connected device.\n
        <b>=></b> Total revenue in the Entertainment segment is projected to reach US$29.35bn in 2022. Total revenue is expected to show an annual growth rate (CAGR 2022-2027) of 6.65%, resulting in a projected market volume of US$42.54bn by 2027.
    </string>
    <string name="about_system_design">
        <b>=></b> Systems design is the process of defining elements of a system like modules, architecture, components and their interfaces and data for a system based on the specified requirements.\n
        <b>=></b> The goal of system design is to allocate the requirements of a large system to hardware and software components.\n
        <b>=></b> System design interviews are an important step in the hiring process for many software engineering roles, particularly for positions that involve building and scaling complex systems.
    </string>
    <string name="about_programming_languages">
        <b>=></b> A programming language is a way for programmers (developers) to communicate with computers. Programming languages consist of a set of rules that allows string values to be converted into various ways of generating machine code, or, in the case of visual programming languages, graphical elements.\n
        <b>=></b> The languages that are used to write a program or set of instructions are called "Programming languages". Programming languages are broadly categorized into three types âˆ’ Machine level language. Assembly level language. High-level language.\n
        <b>=></b>  These programming languages are written in lines of code. When its arranged in the right order, it can be used to create software programs.
    </string>
    <string name="about_dsa">
        <b>=></b> DSA stands for Data Structures and Algorithms. It is also sometimes referred to as PSDS - Problem Solving Data Structures. DSA is applied in problem-solving and enables developers to learn to write efficient code. The quality of the code can be judged by how much memory and time it consumes.\n
        <b>=></b> Data structure and Algorithm (DSA) is applied in all disciplines of software development. DSA is the building block of the software development process. It is not limited to a single programming language. Although programming languages evolve or get dormant over time, DSA is incorporated into all of these languages.\n
        <b>=></b> Product Based Companies place so much emphasis on Data Structures and Algorithms because it demonstrate the problem-solving ability of a candidate. There is no room to craft elaborate stories and this means that either the candidate can solve the problem or they cant.\n
        <b>=></b> DSA is a must to crack the tech interviews at top product based companies.
    </string>
    <string name="about_oops">
        <b>=></b> Object-Oriented Programming System (OOPs) is a programming concept that works on the principles of abstraction, encapsulation, inheritance, and polymorphism.\n
        <b>=></b> It allows users to create objects they want and create methods to handle those objects.\n
        <b>=></b> Features of OOPS makes it easy for programmers to solve complex scenarios.\n
        <b>=></b> OOPS is one of the most important part of the tech interviews.
    </string>
    <string name="about_dbms">
        <b>=></b> A database management system (or DBMS) is essentially nothing more than a computerized data-keeping system.\n
        <b>=></b> Users of the system are given facilities to perform several kinds of operations on such a system for either manipulation of the data in the database or the management of the database structure itself.\n
        <b>=></b> For example: MySQL, Oracle, etc are a very popular commercial database which is used in different applications.\n
        <b>=></b> DBMS is also very important part of the tech interviews.
    </string>
    <string name="about_os">
        <b>=></b> An operating system is system software that manages computer hardware and software resources, and provides common services for computer programs.\n
        <b>=></b> An operating system (OS) is the program that, after being initially loaded into the computer by a boot program, manages all of the other application programs in a computer. The application programs make use of the operating system by making requests for services through a defined application program interface (API).\n
        <b>=></b> OS is the most essential and vital part of any tech interviews.
    </string>
    <string name="about_se">
        <b>=></b> Software Engineering focuses on analysing the needs and requirements of users to design, deploy, and test new software.\n
        <b>=></b> This subject mainly revolves around the concepts of designs, requirements, design and implementation, software testing, software evolution, project planning, quality management....
    </string>
    <string name="about_cn">
        <b>=></b> A computer network is a set of computers sharing resources located on or provided by network nodes.\n
        <b>=></b> Computers use common communication protocols over digital interconnections to communicate with each other.\n
        <b>=></b> Computer networking refers to interconnected computing devices that can exchange data and share resources with each other. These networked devices use a system of rules, called communications protocols, to transmit information over physical or wireless technologies.\n
        <b>=></b> Computer Networks is also one of the most important part of the tech interviews.
    </string>
    <string name="about_github">
        <b>=></b> GitHub is a web-based interface that uses Git, the open source version control software that lets multiple people make separate changes to web pages at the same time.\n
        <b>=></b> As Carpenter notes, because it allows for real-time collaboration, GitHub encourages teams to work together to build and edit their site content.\n
        <b>=></b> Its used for storing, tracking, and collaborating on software projects. It makes it easy for developers to share code files and collaborate with fellow developers on open-source projects. GitHub also serves as a social networking site where developers can openly network, collaborate, and pitch their work.
    </string>
    <string name="about_sde_sheet">
        <b>=></b> SDE Sheet contains very handily crafted and picked top coding interview questions from different topics of Data Structures and Algorithms.\n
        <b>=></b> Solving all the problems from Striver SDE sheet is enough to get into MNCs.\n
        <b>=></b> SDE Sheet is a list of the most important topics or the most popular questions that are asked in the Software Development Engineer Interviews.
    </string>
    <string name="about_web_development">
        <b>=></b> Web development is the work involved in developing a website for the Internet or an intranet.\n
        <b>=></b> Web development can range from developing a simple single static page of plain text to complex web applications, electronic businesses, and social network services.\n
        <b>=></b> Its the work that happens behind the scenes to make a website look great, work fast and perform well with a seamless user experience. Web developers do this by using a variety of coding languages.
    </string>
    <string name="about_leetcode_solutions">
        <b>=></b> Leetcode-style problems have many benefits aside from the technical learnings they can provide. These types of problems tend to force developers into choosing one among many different paths of implementation.\n
        <b>=></b> These are great practice for learning new algorithms, data structures, and approaches to solving problems.\n
        <b>=></b> LeetCode is the best platform to help people practice solving coding problems and prepare for technical interviews. The main users are software engineers. LeetCode has over 1,900 questions covering many different programming concepts.
        <b>=></b> Almost all of the coding questions asked in the tech interviews are directly taken from leetcode platform.
    </string>
    <string name="about_coding_practices">
        <b>=></b> The definition of coding means inputting commands in a language that computers can understand, to build websites, apps and software. Simply put, computer coding is the process of using a programming language to deliver instructions to a computer.\n
        <b>=></b> The reason why coding standards are important is that they help to ensure safety, security, and reliability. Every development team should use one. Even the most experienced developer could introduce a coding defect â€” without realizing it. And that one defect could lead to a minor glitch.\n
        <b>=></b> Coding best practices or programming best practices are a set of informal rules that many software developers in computer programming follow to improve software quality.
    </string>
    <string name="about_questions">
        <b>=></b> Here is a list of most important coding questions from all the topics asked previously in tech interviews.
    </string>
    <string name="about_c_programming">
        <b>=></b> C is an imperative procedural language, supporting structured programming, lexical variable scope and recursion, with a static type system.\n
        <b>=></b> It was designed to be compiled to provide low-level access to memory and language constructs that map efficiently to machine instructions, all with minimal runtime support.\n
        <b>=></b> C language is widely used for developing system software, application software, and embedded systems.
    </string>

    <string name="OPERATORS">
        OPERATORS
    </string>
    <string name="about_cpp_programming">
        <b>=></b> C++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs.\n
        <b>=></b> C++ is portable and can be used to develop applications that can be adapted to multiple platforms.\n
        <b>=></b> C++ is used in developing browsers, operating systems, and applications, as well as in-game programming, software engineering, data structures, etc.\n
        <b>=></b> Latest version of C++ is C++23.
    </string>
    <string name="about_java_programming">
        <b>=></b> Java is a widely-used programming language for coding web applications.\n
        <b>=></b> Java is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible.\n
        <b>=></b> Latest version of Java is Java SE 18 released on March, 22nd 2022.
    </string>
    <string name="about_python_programming">
        <b>=></b> Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation via the off-side rule.\n
        <b>=></b> Python can connect to database systems. It can also read and modify files. Python can be used to handle big data and perform complex mathematics.\n
        <b>=></b> Latest version of Python is Python 3.10.10, documentation released on 8 February 2023.
    </string>
    <string name="about_roadmaps">
        <b>=></b> Step by step guides and paths to learn different tools or technologies\n
        <b>=></b> Web Developer
Step by step guide to become a modern web developer.\n
        <b>=></b> App Developer
Step by step guide to become a modern app developer.\n
        <b>=></b> Data Scientist
Step by step guide to become a Data scientist.\n
        <b>=></b> AI/ML
Step by step guide to become a AI/ML scientist.
    </string>
    <string name="about_html_and_css">
        <b>=></b> HTML (the Hypertext Markup Language) and CSS (Cascading Style Sheets) are two of the core technologies for building Web pages.\n
        <b>=></b> HTML provides the structure of the page, CSS the (visual and aural) layout, for a variety of devices.\n
        <b>=></b> HTML and CSS are actually not technically programming languages,they are just page structure and style information.
    </string>
    <string name="about_javascript">
        <b>=></b> JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\n
        <b>=></b> It is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, Apache CouchDB and Adobe Acrobat.\n
        <b>=></b> It enables us to create dynamically updating content, control multimedia, animate images, and pretty much everything else.
    </string>
    <string name="about_react">
        <b>=></b> React is a free and open-source front-end JavaScript library for building user interfaces based on components.\n
        <b>=></b> It is maintained by Meta and a community of individual developers and companies.\n
        <b>=></b> React makes it easier to create dynamic web applications because it requires less coding and offers more functionality, as opposed to JavaScript, where coding often gets complex very quickly.
    </string>
    <string name="about_nodejs">
        <b>=></b> Node.js is a cross-platform, open-source server environment that can run on Windows, Linux, Unix, macOS, and more.\n
        <b>=></b> Node.js is a back-end JavaScript runtime environment, runs on the V8 JavaScript Engine, and executes JavaScript code outside a web browser.\n
        <b>=></b> Developers use Node. js to create server-side web applications, and it is perfect for data-intensive applications since it uses an asynchronous, event-driven model.
    </string>
    <string name="about_mongodb">
        <b>=></b> MongoDB is a source-available cross-platform document-oriented database program.\n
        <b>=></b> It is classified as a NoSQL database program, MongoDB uses JSON-like documents with optional schemas.\n
        <b>=></b> It is a document database used to build highly available and scalable internet applications. With its flexible schema approach, it is popular with development teams using agile methodologies.
    </string>
    <string name="arrays_q1">Question 1:\n
        Given an array arr[] and an integer K where K is smaller than size of array, the task is to find the Kth smallest element in the given array. It is given that all array elements are distinct.\n
        <b>Input:</b>\n
        N = 6\n
        arr[] = {7 10 4 3 20 15}\n
        K = 3\n
        <b>Output:</b> 7\n
        <b>Explanation:</b>\n
        3rd smallest element in the given array is 7.\n
    </string>
    <string name="code_array_q1">
        <b>C++ CODE:</b>\n
        int kthSmallest(int arr[], int l, int r, int k) {\n
            int n=r+1;\n
            sort(arr,arr+n);\n
            int count=0;\n
            for(int i=0;i &lt; n;i++)\n
            {\n
                if(arr[i]>0)\n
                {\n
                    count++;\n
                }\n
                if(count==k)\n
                {\n
                    return arr[i];\n
                }\n
            }\n
        }\n\n
        <b>JAVA CODE:</b>\n
        class Solution{\n
            public static int kthSmallest(int[] arr, int l, int r, int k){\n
                Arrays.sort(arr);\n
                return arr[k-1];\n
            }\n
        }\n\n
        <b>PYTHON CODE:</b>\n
        class Solution:\n
            def kthSmallest(self,arr, l, r, k):\n
                arr.sort()\n
                return arr[k-1]\n
    </string>


    <string name="arrays_q2">Question 2:\n
        Given an array of size N containing only 0s, 1s, and 2s; sort the array in ascending order.\n
        <b>Input:</b>\n
        N = 5\n
        arr[]= {0 2 1 2 0}\n
        <b>Output:</b>\n
        0 0 1 2 2\n
        <b>Explanation:</b>\n
        0s 1s and 2s are segregated into ascending order.\n
    </string>

    <string name="code_array_q2">
        <b>C++ CODE:</b>\n
        void sort012(int a[], int n){\n
            int num0=0,num2=0;\n
            for(int i=0;i &lt; n;i++){\n
                if(a[i]==0) num0++;\n
                else if(a[i]==2) num2++;\n
            }\n
            for(int i=0;i &lt; n  i++){\n
                if(i>=0 &amp;&amp; i &lt; num0) a[i]=0;\n
                else if(i>=num0 &amp;&amp; i &lt; (n-num2)) a[i]=1;\n
                else a[i]=2;\n
            }\n
        }\n\n
        <b>JAVA CODE:</b>\n
        public static void sort012(int a[], int n){\n
            int zero=0, one=0, two=0;\n
            for(int i=0; i &lt; a.length; i++){\n
                if(a[i] == 0){\n
                    zero++;\n
                }\n
                else if(a[i] == 1){\n
                    one++;\n
                }\n
                else{\n
                    two++;\n
                }\n
            }\n
            for(int i=0; i &lt; a.length; i++){\n
                if(i &lt; zero){\n
                    a[i] = 0;\n
                }\n
                else if(i>=zero &amp;&amp; i &lt; (one+zero)){\n
                    a[i] = 1;\n
                }\n
                else{\n
                    a[i] = 2;\n
                }\n
            }\n
        }\n\n
    </string>

    <string name="arrays_q3">Question 3:\n
        Given an unsorted array arr[] of size N having both negative and positive integers. The task is place all negative element at the end of array without changing the order of positive element and negative element.\n
        <b>Input:</b>\n
        N = 8\n
        arr[] = {1, -1, 3, 2, -7, -5, 11, 6}\n
        K = 3\n
        <b>Output:</b> 1  3  2  11  6  -1  -7  -5\n
    </string>
    <string name="code_array_q3">
        <b>C++ CODE:</b>\n
        class Solution{\n
            public:\n
            void segregateElements(int arr[],int n){\n
                int j=0,k=0;\n
                int neg[n];\n
                for(int i=0;i &lt; n;i++){\n
                    if(arr[i] &lt; 0) neg[k++] = arr[i];\n
                    else arr[j++] = arr[i];\n
                }\n
                for(int i=0;j &lt; n;j++,i++)\n
                    arr[j] = neg[i];\n
                }\n
            }\n\n
        <b>JAVA CODE:</b>\n
        class Solution {\n
            public void segregateElements(int arr[], int n){\n
                if(n==0||n==1)\n
                    return;\n
                int[] a=new int [n];\n
                int x=0;\n
                for(int i=0;i&lt;n;i++){\n
                    if(arr[i]>=0){\n
                        a[x]=arr[i];\n
                        x++;\n
                    }\n
                }\n
                for(int i=0;i&lt;n;i++){\n
                    if(arr[i]&lt;=0){\n
                        a[x]=arr[i];\n
                        x++;\n
                    }\n
                }\n
                for(int i=0;i&lt;n;i++){\n
                    arr[i]=a[i];\n
                }\n
            }\n
        }\n\n
        <b>PYTHON CODE:</b>\n
        def segregateElements(self, arr, n):\n
            n=len(arr)\n
            x=[]\n
            for i in range(n):\n
                if arr[i]&lt;0:\n
                    arr=arr+[arr[i]]\n
                    x=x+[arr[i]]\n
            for i in range(len(x)):\n
                arr.remove(x[i])\n
            return arr\n
    </string>


    <string name="arrays_q4">Question 4:\n
        Given an unsorted array arr[] of size N having both negative and positive integers. The task is place all negative element at the end of array without changing the order of positive element and negative element.\n
        <b>Input:</b>\n
        N = 5\n
        arr[] = {1,2,3,-2,5}\n
        <b>Output:</b> 9\n
        <b>Explanation:</b>\n
        Max sub array sum is 9 of elements (1, 2, 3, -2, 5) which is a contiguous sub array.\n
    </string>
    <string name="code_array_q4">
        <b>C++ CODE:</b>\n
         long long maxSub_arraySum(int arr[], int n){\n
            int res = arr[0];\n
            int curr = arr[0];\n
            for(int i=1;i &lt; n;i++){\n
                curr = max(curr+arr[i], arr[i]);\n
                res = max(res,curr);\n
            }\n
            return res;\n
         }\n\n
        <b>JAVA CODE:</b>\n
        class Solution{\n
            long maxSub_arraySum(int arr[], int n){\n
                long max=Integer.MIN_VALUE;\n
                long sum=0;\n
                for(int i=0;i &lt; n;i++){\n
                    sum+=arr[i];\n
                    if(max &lt; sum)\n
                    max=sum;\n
                    //dont carry negative sum\n
                    if(sum &lt; 0)\n
                    sum=0;\n
                }\n
                return max;\n
            }\n
        }\n\n
    </string>


    <string name="arrays_q5">Question 5:\n
        Given a sorted array of positive integers. Your task is to rearrange the array elements alternatively i.e first element should be max value, second should be min value, third should be second max, fourth should be second min and so on.\n
        Note: Modify the original array itself. Do it without using any extra space. You do not have to return anything.\n
        <b>Input:</b>\n
        N = 6\n
        arr[] = {1,2,3,4,5,6}\n
        <b>Output:</b> 6 1 5 2 4 3\n
        <b>Explanation:</b>\n
        Max element = 6, min = 1, second max = 5, second min = 2, and so on... Modified array is : 6 1 5 2 4 3.\n
    </string>
    <string name="code_array_q5">
        <b>C++ CODE:</b>\n
         class Solution{\n
            public:\n
            int next (int prev, int n){\n
                if(prev+1 > n/2) return (n-prev-1)*2;\n
                else{\n
                    return (prev+1)*2-1;\n
                }\n
            }\n
            void arrange (int start, int n, long long *arr){\n
                int swap_index = next(start, n);\n
                while(arr[swap_index] > 0){\n
                    swap(arr[swap_index], arr[start]);\n
                    arr[swap_index] *= -1;\n
                    swap_index = next(swap_index, n);\n
                }\n
            }\n
            void rearrange(long long *arr, int n){\n
                for(int i=0; i &lt; n; i++){\n
                    if(arr[i] > 0)\n
                        arrange(i, n, arr);\n
                    }\n
                for(int i=0; i &lt; n; i++){\n
                    arr[i] *= -1;\n
                }\n
            }\n
         }\n\n
        <b>JAVA CODE:</b>\n
        public static void rearrange(long arr[], int n){\n
            int max = (int)arr[n-1] + 1;\n
            int max_i = n-1;\n
            int min_i = 0;\n
            for(int i=0; i &lt; n; i++){\n
                if(i%2 == 0){\n
                    arr[i] = (arr[max_i]%max)*max + arr[i];\n
                    max_i--;\n
                }\n
                else{\n
                    arr[i] = (arr[min_i]%max)*max + arr[i];\n
                    min_i++;\n
                }\n
            }\n

            for(int i=0; i &lt; n; i++){\n
                arr[i] = arr[i]/max;\n
            }\n
        }
    </string>


    <string name="bit_manipulation_q1">Question 1:\n
        Given a non-negative integer N. The task is to check if N is a power of 2. More formally, check if N can be expressed as 2^x for some x.\n
        <b>Input:</b>\n
        N = 1\n
        <b>Output:</b> YES\n
        <b>Explanation:</b>\n
        1 is equal to 2 raised to 0 (20 = 1).
    </string>
    <string name="code_bit_manipulation_q1">
        <b>C++ CODE:</b>\n
         bool isPowerofTwo(long long n){\n
            if(n==0)return false;\n
            if((n &amp; n-1)==0)return true;\n
            return false;\n
         }\n\n
        <b>JAVA CODE:</b>\n
        class Solution{\n
            // Function to check if given number n is a power of two.\n
            public static boolean isPowerofTwo(long n){\n
                if(n==1){\n
                    return true;\n
                }\n
                if(n==0){\n
                    return false;\n
                }\n
                while(n>1){\n
                    if(n%2!=0){\n
                        return false;\n
                    }\n
                    else{\n
                        n=n/2;\n
                    }\n
                }\n
                return true;\n
            }\n
        }\n\n
        <b>PYTHON CODE:</b>\n
        def isPowerofTwo(self,n):\n
            if n==0:\n
                return 0\n
            if (n &amp; (n-1))==0:\n
                return 1\n
            return 0
    </string>


    <string name="bit_manipulation_q2">Question 2:\n
        You are given two numbers A and B. The task is to count the number of bits needed to be flipped to convert A to B.\n
        <b>Input:</b>\n
         A = 10, B = 20\n
        <b>Output:</b> 4\n
        <b>Explanation:</b>\n
        A  = 10100\n
        B  = 11001\n
        As we can see, the bits of A that need to be flipped are 10100. If we flip these bits, we get 11001, which is B.\n
    </string>
    <string name="code_bit_manipulation_q2">
        <b>C++ CODE:</b>\n
         int countBitsFlip(int a, int b){\n
            int i=0,cnt=0;\n
            while(i &lt; 32){\n
                if((a&amp;(1&lt;&lt;i))!=(b&amp;(1&lt;&lt;i)))\n
                cnt++;\n
                i++;\n
            }\n
            return cnt;\n
         }\n\n
        <b>JAVA CODE:</b>\n
        class Solution{\n
            // Function to check if given number n is a power of two.\n
            public static int countBitsFlip(int a, int b){\n
                int c=a^b;  // XOR will identify diff bit values\n
                int count=0;\n
                while(c>0){\n
                    c&amp;=(c-1);\n
                    count++;\n
                }\n
                return count;\n
            }\n
        }\n\n
    </string>


    <string name="bit_manipulation_q3">Question 3:\n
        Given an array A containing 2*N+2 positive numbers, out of which 2*N numbers exist in pairs whereas the other two number occur exactly once and are distinct. Find the other two numbers. Return in increasing order.\n
        <b>Input:</b>\n
         N=2\n
        arr[] = {1, 2, 3, 2, 1, 4}\n
        <b>Output:</b> 3 4\n
        <b>Explanation:</b>\n
        3 and 4 occur exactly once.\n
    </string>
    <string name="code_bit_manipulation_q3">
        <b>JAVA CODE:</b>\n
        class Solution{\n
            // Function to check if given number n is a power of two.\n
            public static int countBitsFlip(int a, int b){\n
                int c=a^b;  // XOR will identify diff bit values\n
                int count=0;\n
                while(c>0){\n
                    c&amp;=(c-1);\n
                    count++;\n
                }\n
                return count;\n
            }\n
        }\n\n
    </string>


    <string name="dynamic_programming_q1">Question 1:\n
        Given an integer array coins[ ] of size N representing different denominations of currency and an integer sum, find the number of ways you can make sum by using different combinations from coins[ ].
        Note: Assume that you have an infinite supply of each type of coin. \n
        <b>Input:</b>\n
         sum = 4, N = 3\n
         coins[] = {1,2,3}\n
        <b>Output:</b> 4\n
        <b>Explanation:</b>\n
         Four Possible ways are: {1,1,1,1},{1,1,2},{2,2},{1,3}.\n
    </string>
    <string name="code_dynamic_programming_q1">
        <b>C++ CODE:</b>\n
         long long int count(int coins[], int n, int sum) {\n
                long long int dp[n+1][sum+1];\n
                for(int i=0;i&lt;=sum;i++){\n
                    dp[0][i]=0;\n
                }\n
                for(int i=0;i&lt;=n;i++){\n
                    dp[i][0]=1;\n
                }\n
                for(int i=1;i&lt;=n;i++){\n
                    for(int j=1;j&lt;=sum;j++){\n
                        if(coins[i-1]>j){\n
                            dp[i][j]=dp[i-1][j];\n
                        }\n
                        else{\n
                            dp[i][j]=dp[i][j-coins[i-1]]+dp[i-1][j];\n
                        }\n
                    }\n\n
                }\n
                return dp[n][sum];\n
         }\n\n
        <b>JAVA CODE:</b>\n
        class Solution {
            public long count(int coins[], int N, int sum) {\n
                long dp[][]=new long[N+1][sum+1];\n
                for(int i=N-1;i>=0;i--){\n
                    for(int j=0;j&lt;=sum;j++){\n
                        if(j==0){\n
                            dp[i][j]=1;\n
                            continue;\n
                        }\n
                        long x=0,y=0;\n
                        if(j-coins[i]>=0)\n
                        x=dp[i][j-coins[i]];\n
                        y=dp[i+1][j];\n
                        dp[i][j]=x+y;\n
                    }\n
                }\n
                return dp[0][sum];\n
            }\n
        }\n\n
        <b>PYTHON CODE:</b>\n
        class Solution:\n
            def count(self, coins, N, Sum):\n
                dp=[[0 for i in range(Sum+1)]for j in range(N+1)]\n
                for i in range(N+1):\n
                    dp[i][0]=1\n
                for i in range(1,N+1):\n
                    for j in range(Sum+1):\n
                        if coins[i-1]&lt;=j:\n
                            dp[i][j]=dp[i][j-coins[i-1]]+dp[i-1][j]\n
                        else:\n
                            dp[i][j]=dp[i-1][j]\n
                return dp[N][Sum]\n
    </string>

    <string name="dynamic_programming_q2">Question 2:\n
        Given two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.\n
        <b>Input:</b>\n
         A = 6, B = 6\n
         str1 = ABCDGH\n
         str2 = AEDFHR\n
        <b>Output:</b> 3\n
        <b>Explanation:</b>\n
          LCS for input Sequences ABCDGH and AEDFHR is ADH of length 3..\n
    </string>
    <string name="code_dynamic_programming_q2">
        <b>C++ CODE:</b>\n
         int solve(string s1 , string s2 , int x ,int y,vector&lt;vector&lt;int>>>&amp; dp){\n
            if(x&lt;0 || y&lt;0) return 0;\n
            if(dp[x][y]!=-1) return dp[x][y];\n
            if(s1[x]==s2[y])return dp[x][y]=  1+solve(s1,s2,x-1,y-1,dp);\n
            else return dp[x][y]=max(solve(s1,s2,x-1,y,dp),solve(s1,s2,x,y-1,dp));\n
         }\n
         int lcs(int x, int y, string s1, string s2){\n
            vector&lt;vector&lt;int>> dp(x+1,vector&lt;int>(y+1,-1));\n
            x--;\n
            y--;\n
            return  solve(s1,s2,x,y,dp);\n
         }\n\n
        <b>JAVA CODE:</b>\n
        class Solution{\n
            //Function to find the length of longest common subsequence in two strings.\n
            static int lcs(int m, int n, String s1, String s2){\n
                int [][]dp = new int[m+1][n+1];\n
                for(int i =0; i&lt;m; i++){\n
                    dp[i][0] =0;\n
                }\n
                for(int i =0; i&lt;n; i++){\n
                    dp[0][i] =0;\n
                }\n
                for(int i=1; i&lt;=m; i++){\n
                    for(int j =1;j&lt;=n;j++){\n
                        if(s1.charAt(i-1) == s2.charAt(j-1)){\n
                            dp[i][j] = 1+ dp[i-1][j-1];\n
                        }\n
                        else{\n
                            dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);\n
                        }\n
                    }\n
                }\n
                return dp[m][n];\n
            }\n
        }\n\n
        <b>PYTHON CODE:</b>\n
        class Solution:\n
            #Function to find the length of longest common subsequence in two strings.\n
            def lcs(self,n,m,text1,text2):\n
                n,m=len(text1),len(text2)\n
                dp=[[0 for i in range(m+1)]for j in range(n+1)]\n
                for i in range(1,n+1):\n
                    for j in range(1,m+1):\n
                        if text1[i-1]==text2[j-1]:\n
                            dp[i][j]=dp[i-1][j-1]+1\n
                        else:\n
                            dp[i][j]=max(dp[i-1][j],dp[i][j-1])\n
                return dp[n][m]\n
    </string>


    <string name="graphs_q1">Question 1:\n
        Detect Cycle in a Directed Graph\n\n
        Given the root of a Directed graph, The task is to check whether the graph contains a cycle or not. \n
        <b>Input:</b>\n
         N = 4, E = 6\n
         coins[] = {1,2,3}\n
        <b>Output:</b> Yes\n
        <b>Explanation:</b>\n
         The diagram clearly shows a cycle 0 -> 2 -> 0\n
    </string>
    <string name="code_graphs_q1">
        <b>C++ CODE:</b>\n
        class Graph {\n
            // No. of vertices\n
            int V;\n

            // Pointer to an array containing adjacency lists\n
            list&lt;int>* adj;\n

            // Used by isCyclic()\n
            bool isCyclicUtil(int v, bool visited[], bool* rs);\n

            public:\n
            Graph(int V);\n
            void addEdge(int v, int w);\n
            bool isCyclic();\n
        };\n

        Graph::Graph(int V){\n
            this->V = V;\n
            adj = new list&lt;int>[V];\n
        }\n

        void Graph::addEdge(int v, int w){\n
            // Add w to vâ€™s list.\n
            adj[v].push_back(w);\n
        }\n

        // DFS function to find if a cycle exists\n
        bool Graph::isCyclicUtil(int v, bool visited[],bool* recStack){\n
            if (visited[v] == false) {\n
                // Mark the current node as visited\n
                // and part of recursion stack\n\n
                visited[v] = true;\n
                recStack[v] = true;\n

                // Recur for all the vertices adjacent to this\n
                // vertex\n
                list&lt;int>::iterator i;\n
                for (i = adj[v].begin(); i != adj[v].end(); ++i) {\n
                    if (!visited[*i] &amp;&amp; isCyclicUtil(*i, visited, recStack))\n
                        return true;\n
                    else if (recStack[*i])\n
                        return true;\n
                }\n
            }\n

            // Remove the vertex from recursion stack\n
            recStack[v] = false;\n
            return false;\n
        }\n

        // Returns true if the graph contains a cycle, else false\n
        bool Graph::isCyclic(){\n
            // Mark all the vertices as not visited\n
            // and not part of recursion stack\n
            bool* visited = new bool[V];\n
            bool* recStack = new bool[V];\n
            for (int i = 0; i &lt; V; i++) {\n
                visited[i] = false;\n
                recStack[i] = false;\n
            }\n

            // Call the recursive helper function\n
            // to detect cycle in different DFS trees\n
            for (int i = 0; i &lt; V; i++)\n
                if (!visited[i] &amp;&amp; isCyclicUtil(i, visited, recStack))\n
                    return true;\n

            return false;\n
        }\n

        // Driver code\n
        int main(){\n
            // Create a graph\n
            Graph g(4);\n
            g.addEdge(0, 1);\n
            g.addEdge(0, 2);\n
            g.addEdge(1, 2);\n
            g.addEdge(2, 0);\n
            g.addEdge(2, 3);\n
            g.addEdge(3, 3);\n

            // Function call\n
            if (g.isCyclic())\n
                cout &lt;&lt; "Graph contains cycle";\n
            else\n
                cout &lt;&lt; "Graph doesn't contain cycle";\n
            return 0;\n
        }\n\n
    </string>
    <string name="graphs_q2">Question 2:\n
        Detect Cycle in a Undirected Graph\n\n
        Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. Graph is in the form of adjacency list where adj[i] contains all the nodes ith node is having edge with.\n
        <b>Input:</b>\n
         N = 5, E = 5\n
         adj ={{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}}\n
        <b>Output:</b> 1\n
        <b>Explanation:</b>\n
         1->2->3->4->1 is a cycle.\n
    </string>
    <string name="code_graphs_q2">
        <b>C++ CODE:</b>\n
        bool dfs(int st,bool visited[],vector&lt;int>adj[],int par){\n
            visited[st]=true;\n
            bool isCycle=false;\n
            for(auto child:adj[st]){\n
                if(visited[child] &amp;&amp; child==par) continue;\n
                if(visited[child])  return true;\n
                isCycle|=dfs(child,visited,adj,st);\n
            }\n
            return isCycle;\n
        }\n
        bool isCycle(int v, vector&lt;int> adj[]) {\n
            bool visited[v+10]={0};\n
            for(int i=0;i&lt;v;i++){\n
                if(visited[i])  continue;\n
                    if(dfs(i,visited,adj,-1))   return true;\n
            }\n
            return false;\n
        }\n\n
    </string>


    <string name="greedy_q1">Question 1:\n
        Given a value of V Rs and an infinite supply of each of the denominations {1, 2, 5, 10, 20, 50, 100, 500, 1000} valued coins/notes, The task is to find the minimum number of coins and/or notes needed to make the change.\n
        <b>Input:</b>\n
         V=20\n
        <b>Output:</b> 2\n
        <b>Explanation:</b>\n
        We need a 50 Rs note and a 20 Rs note.\n
    </string>
    <string name="code_greedy_q1">
        <b>C++ CODE:</b>\n
        vector&lt;int> minPartition(int N){\n
        //This is greedy approach work if sum of 2 coins is less than the 3rd one\n
        // 2+5 &lt; 10\n
        //10 +20 &lt; 50....\n
        //optimised approach is by DP\n
        vector&lt;int> arr = {2000,500,200,100,50,20,10,5,2,1};\n
        vector&lt;int>ans;\n
        int n = arr.size();\n
        int totalMoney = n;\n
        int i = 0;\n
        while(N){\n
            int no = N/arr[i];\n
            for(int j = 0; j &lt; no; j++){\n
                ans.push_back(arr[i]);\n
            }\n
            N = N - no*arr[i];\n
            i++;\n
        }\n
        return ans;\n
        }\n\n
        <b>JAVA CODE:</b>
        class Solution {\n
        static List&lt;Integer> minPartition(int N) {\n
        List&lt;Integer> list = new ArrayList&lt;Integer>();\n

        int arr[] = {1, 2, 5, 10, 20, 50, 100, 200, 500, 2000};\n
        int ln =arr.length-1;\n

        for(int i=ln; i>=0; i--){\n
            while(N >= arr[i] &amp;&amp; N > 0){\n
                N = N - arr[i];\n
                list.add(arr[i]);\n
            }\n
            if(N == 0) break;\n
        }\n

        return list;\n
        }\n
        }\n\n
        <b>PYTHON CODE:</b>
        def minPartition(self, n):\n
        a=[1,2,5,10,20,50,100,200,500,2000]\n
        l=[]\n
        i=len(a)-1\n
        while n!=0 and i>=0:\n
            if a[i]>n:\n
                i-=1\n
            else:\n
                n-=a[i]\n
                l.append(a[i])\n
        return l\n
    </string>
    <string name="greedy_q2">Question 2:\n
        Given arrival and departure times of all trains that reach a railway station. Find the minimum number of platforms required for the railway station so that no train is kept waiting. Consider that all the trains arrive on the same day and leave on the same day. Arrival and departure time can never be the same for a train but we can have arrival time of one train equal to departure time of the other. At any given instance of time, same platform can not be used for both departure of a train and arrival of another train. In such cases, we need different platforms.\n
        <b>Input:</b>\n
         n=6\n
        arr[] = {0900, 0940, 0950, 1100, 1500, 1800}\n
        dep[] = {0910, 1200, 1120, 1130, 1900, 2000}\n
        <b>Output:</b> 3\n
        <b>Explanation:</b>\n
        Minimum 3 platforms are required to safely arrive and depart all trains.\n
    </string>
    <string name="code_greedy_q2">
        <b>C++ CODE:</b>\n
        class Solution{\n
            public:\n
            //Function to find the minimum number of platforms required at the railway station such that no train waits.\n
            int findPlatform(int arr[], int dep[], int n){\n
                map&lt;int,int> mp;\n
                for(int i=0;i&lt;n;i++){\n
                    mp[arr[i]]++;\n
                    mp[dep[i]+1]--;\n
                }\n
                int maxplat=1;\n
                int sum=0;\n
                for(auto t:mp){\n
                    sum+=t.second;\n
                    maxplat = max(maxplat,sum);\n
                }\n
                return maxplat;\n
            }\n
        };\n\n
        <b>JAVA CODE:</b>
        class Solution{\n
            static int findPlatform(int arr[], int dep[], int n){\n
            int max = 0, plat_occupied = 0;\n
            Arrays.sort(arr);\n
            Arrays.sort(dep);\n
            int i = 0, j = 0;\n
            while (i &lt; n) {\n
                if (arr[i] &lt;= dep[j]) {\n
                    plat_occupied++;\n
                    i++;\n
                } else if (arr[i] > dep[j]) {\n
                    plat_occupied--;\n
                    j++;\n
                }\n
                max = Math.max(max, plat_occupied);\n
            }\n
            return max;\n
        }\n
        }\n\n
        <b>PYTHON CODE:</b>
        class Solution:\n
            def minimumPlatform(self,n,arr,dep):\n
                arr.sort()\n
                dep.sort()\n
                i=j=count=max1=0\n
                while(i&lt;n):\n
                    if arr[i]&lt;=dep[j]:\n
                        i+=1\n
                        count+=1\n
                        max1 = max(max1,count)\n
                    else:\n
                        j+=1\n
                        count-=1\n
                return max1\n
    </string>


    <string name="linked_list_q1">Question 1:\n
        Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should be considered as a group and must be reversed.\n
        <b>Input:</b>\n
         LinkedList: 1->2->2->4->5->6->7->8\n
         K = 4\n
        <b>Output:</b> 4 2 2 1 8 7 6 5 \n
        <b>Explanation:</b>\n
        The first 4 elements 1,2,2,4 are reversed first and then the next 4 elements 5,6,7,8. Hence, the resultant linked list is 4->2->2->1->8->7->6->5.\n
    </string>
    <string name="code_linked_list_q1">
        <b>C++ CODE:</b>\n
        struct node{\n
            int data;\n
            struct node* next;\n

            node(int x){\n
                data = x;\n
                next = NULL;\n
            }\n
        }*head;\n
        struct node *reverse (struct node *head, int k){\n
            Node *p,*cr,*t;\n
            p=nullptr;\n
            cr=head;\n
            int d=k;\n
            while(cr&amp;&amp;d--){\n
                t=cr->next;\n
                cr->next=p;\n
                p=cr;\n
                cr=t;\n
            }\n
            if(cr) head->next=reverse(cr,k);\n
            return p;\n
        };\n\n
        <b>JAVA CODE:</b>
        class Node{\n
            int data;\n
            Node next;\n
            Node(int key){\n
                data = key;\n
                next = null;\n
            }\n
        }\n
        class Solution {\n
            public static Node reverse(Node node, int k) {\n
                if (k == 1) return node;\n
                else k -= 1;\n
                Node pre = new Node(0);\n
                pre.next = node;\n
                Node res = pre, p1 = node, p2 = p1.next;\n
                for (int cnt = 0; p2 != null; cnt++) {\n
                    if (cnt != 0 &amp;&amp; cnt % k == 0) {\n
                        pre = p1;\n
                        p1 = p1.next;\n
                        p2 = p2.next;\n
                        if (p2 == null) break;\n
                    }\n
                    p1.next = p2.next;\n
                    p2.next = pre.next;\n
                    pre.next = p2;\n
                    p2 = p1.next;\n
                }\n
                return res.next;\n
            }\n
        }\n
    </string>
    <string name="linked_list_q2">Question 2:\n
        A number N is represented in Linked List such that each digit corresponds to a node in linked list. You need to add 1 to it.\n
        <b>Input:</b>\n
         LinkedList: 4->5->6\n
        <b>Output:</b> 457\n
    </string>
    <string name="code_linked_list_q2">
        <b>C++ CODE:</b>\n
        struct node{\n
            int data;\n
            struct node* next;\n

            node(int x){\n
                data = x;\n
                next = NULL;\n
            }\n
        }*head;\n
        Node* reverse(Node* head){\n
            if(!head || !head->next)\n
                return head;\n

            Node* curr = head;\n
            Node* prev = NULL;\n
            Node* Next = head->next;\n

            while(curr->next!=NULL){\n
                curr->next = prev;\n
                prev = curr;\n
                curr = Next;\n
                Next = Next->next;\n
            }\n
            curr->next = prev;\n
            return curr;\n
        }\n

        Node* addOne(Node *head){\n

            Node* newHead = reverse(head);\n
            Node* temp = newHead;\n

            while(temp->next != NULL &amp;&amp; temp->data == 9){\n
                temp->data = 0;\n
                temp = temp->next;\n
            }\n
            if(temp->data != 9)\n
                temp->data += 1;\n
            else if(temp->next == NULL &amp;&amp; temp->data == 9){\n
                temp->data = 0;\n
                temp->next = new Node(1);\n
            }\n

            return reverse(newHead);\n
        }\n\n
        <b>JAVA CODE:</b>
        class Node{\n
            int data;\n
            Node next;\n
            Node(int key){\n
                data = key;\n
                next = null;\n
            }\n
        }\n
        class Solution {\n
            public static Node addOne(Node head) { \n
                Node pre = new Node(0);\n
                pre.next = head;\n
                Node p1 = head, p2 = p1.next;\n

                /* reverse the linked list */\n
                while (p2 != null) {\n
                    p1.next = p2.next;\n
                    p2.next = pre.next;\n
                    pre.next = p2;\n
                    p2 = p1.next;\n
                }\n
                p1 = pre.next;\n

                /* add 1 to the linked list */\n
                p1.data += 1;\n
                while (p1.data == 10) {\n
                    p1.data %= 10;\n
                    if (p1.next == null) p1.next = new Node(0);\n
                    p1.next.data += 1;\n
                    p1 = p1.next;\n
                }\n

                /* reverse the linked list again */\n
                p1 = pre.next;\n
                p2 = p1.next;\n
                while (p2 != null) {\n
                    p1.next = p2.next;\n
                    p2.next = pre.next;\n
                    pre.next = p2;\n
                    p2 = p1.next;\n
                }\n
                return pre.next;\n
            }\n
        }\n
    </string>


    <string name="backtracking_q1">Question 1:\n
        Consider a rat placed at (0, 0) in a square matrix of order N * N. It has to reach the destination at (N - 1, N - 1). Find all possible paths that the rat can take to reach from source to destination. The directions in which the rat can move are U(up), D(down), L(left), R(right). Value 0 at a cell in the matrix represents that it is blocked and rat cannot move to it while value 1 at a cell in the matrix represents that rat can be travel through it. Note: In a path, no cell can be visited more than one time. If the source cell is 0, the rat cannot move to any other cell.\n
        <b>Input:</b>\n
         N = 4\n
         m[][] = {{1, 0, 0, 0},\n
         {1, 1, 0, 1}, \n
         {1, 1, 0, 0},\n
         {0, 1, 1, 1}}\n
        <b>Output:</b> DDRDRR DRDDRR\n
        <b>Explanation:</b>
        The rat can reach the destination at (3, 3) from (0, 0) by two paths - DRDDRR and DDRDRR, when printed in sorted order we get DDRDRR DRDDRR.\n
    </string>
    <string name="code_backtracking_q1">
        <b>C++ CODE:</b>\n
        class Solution{\n
            public:\n
            vector&lt;string> res;\n
            vector&lt;int> dx;\n
            vector&lt;int> dy;\n
            string dir;\n
            vector&lt;string> findPath(vector&lt;vector&lt;int>> &amp;m, int n) {\n
                dx={1,0,-1,0};\n
                dy = {0,1,0,-1};\n
                dir="DRUL";\n
                string temp;\n
                recur(m,0,0,temp);\n
                return res;\n
            }\n
            void recur(vector&lt;vector&lt;int>> &amp;m,int r,int c,string &amp;temp){\n
                // cout&lt;&lt;r&lt;&lt;c;\n
                // cout&lt;&lt;endl;\n
                if(r==m.size()-1 &amp;&amp; c==m[0].size()-1 &amp;&amp; m[r][c]!=0 ){\n
                    res.push_back(temp);\n
                    return ;\n
                }\n

                if(r>=m.size()  || r&lt;0 || c>=m[0].size() || c&lt;0 || m[r][c]==0 || m[r][c]==-1)\n
                    return ;\n
                for(int i=0;i&lt;4;i++){\n
                    temp.push_back(dir[i]);\n
                    int nx=r+dx[i];\n
                    int ny=c+dy[i];\n
                    int x=m[r][c];\n
                    m[r][c]=-1;\n

                    recur(m,nx,ny,temp);\n
                    m[r][c]=x;\n

                    temp.pop_back();\n
                }\n
            }\n
        };\n\n
        <b>JAVA CODE:</b>
        public static boolean isitSafe(int[][] m, int x, int y){\n
            if(x&lt;0 || y&lt;0 || x>=m.length || y>=m.length || m[x][y]==0) return false;\n
            return true;\n
        }\n

        public static void ratinmaze(int[][] m, int x, int y, boolean visited[][], ArrayList&lt;String> ans, List&lt;Character> res){\n
            if(m[m.length-1][m.length-1]==0) return;\n
            if(x==m.length-1 &amp;&amp; y==m.length-1){\n
                String s ="";\n
                for(Character ch: res)\n
                    s += ""+ch;\n

                ans.add(s);\n
                return;\n
            }\n

            if(!isitSafe(m,x,y)) return;\n

            visited[x][y] = true;\n
            if(isitSafe(m,x+1,y) &amp;&amp; !visited[x+1][y]) {\n
                res.add("D");\n
                ratinmaze(m,x+1,y,visited,ans,res);\n
                res.remove(res.size()-1);\n
            }\n

            if(isitSafe(m,x-1,y) &amp;&amp; !visited[x-1][y]){\n
                res.add("U");\n
                ratinmaze(m,x-1,y,visited,ans,res);\n
                res.remove(res.size()-1);\n
            }\n

            if(isitSafe(m,x,y+1) &amp;&amp; !visited[x][y+1]){\n
                res.add("R");\n
                ratinmaze(m,x,y+1,visited,ans,res);\n
                res.remove(res.size()-1);\n
            }\n

            if(isitSafe(m,x,y-1) &amp;&amp; !visited[x][y-1]){\n
                res.add("L");\n
                ratinmaze(m,x,y-1,visited,ans,res);\n
                res.remove(res.size()-1);\n
            }\n

            visited[x][y] = false;\n
        }\n
    </string>
    <string name="backtracking_q2">Question 2:\n
        You are given a string S that contains parentheses and letters. You have to remove the minimum number of invalid parentheses to make the input string valid.\n
        Return all the possible results in the sorted order.\n
        <b>Input:</b>\n
         S = "()())()"\n
        <b>Output:</b> ["(())()","()()()"]\n
    </string>
    <string name="code_backtracking_q2">
        <b>C++ CODE:</b>\n
        set&lt;string> ans;\n
        int c1;\n
        void help(string s, int i, string temp, int x, int c){\n
            if(i == s.size()){\n
                if(x == 0 &amp;&amp; c == c1)\n
                ans.insert(temp);\n
                return;\n
            }\n
            if(s[i] == "(")\n
            help(s, i+1, temp+"(", x+1, c+1);\n
            else if(s[i] == ")" &amp;&amp; x>0)\n
            help(s, i+1, temp+")", x-1, c+1);\n
            if(s[i] != "(" &amp;&amp; s[i] != ")")\n
            help(s, i+1, temp+s[i], x, c);\n
            else\n
            help(s, i+1, temp, x, c);\n
        }\n
        vector&lt;string> removeInvalidParentheses(string s) {\n
            int c = 0, x = 0;\n
            for(int i = 0; i&lt;s.size(); i++){\n
                if(s[i] == "(")x++;\n
                if(s[i] == ")" &amp;&amp; x>0){\n
                    x--;\n
                    c+=2;\n
                }\n
            }\n
            c1 = c;\n
            help(s, 0, "", 0, 0);\n
            vector&lt;string>res;\n
            for(auto i: ans)res.push_back(i);\n
            sort(res.begin(), res.end());\n
            return res;\n
        }\n\n
        <b>JAVA CODE:</b>
        static int findRemovals(String s){\n
            Stack&lt;Character> st = new Stack&lt;>();\n

            for(int i = 0; i &lt; s.length(); i++){\n
                if(s.charAt(i) == "("){\n
                    st.push("(");\n
                }\n
                else if(s.charAt(i) == ")"){\n
                    if(!st.isEmpty() &amp;&amp; st.peek() == "("){\n
                        st.pop();\n
                    }\n
                    else{\n
                        st.push(")");\n
                    }\n
                }\n
            }\n
            return st.size();\n
        }\n

        static void solve(String s, Map&lt;String, Boolean> mp, int rc, ArrayList&lt;String> list){\n
            if(mp.containsKey(s)){\n
                return ;\n
            }\n
            mp.put(s, true);\n

            if(rc == 0){\n
                if(findRemovals(s) == 0){\n
                    list.add(s);\n
                    return;\n
                }    \n
            }\n
            for(int i = 0; i &lt; s.length(); i++){\n
                String left = s.substring(0, i);\n
                String right = s.substring(i+1);\n
                String join = left + right;\n
                solve(join, mp, rc-1, list);\n
            }\n
            return;\n
        }\n
        public static ArrayList&lt;String> removeInvalidParentheses(String s) {\n
            int rc = findRemovals(s);\n
            Map&lt;String, Boolean> mp = new HashMap&lt;>();\n
            ArrayList&lt;String> list = new ArrayList&lt;>();\n
            solve(s, mp, rc, list);\n

            return list;\n
        }\n
    </string>


    <string name="stacks_and_queues_q1">Question 1:\n
        Given an expression string x. Examine whether the pairs and the orders of {,},(,),[,] are correct in exp. For example, the function should return true for exp = [()]{}{[()()]()} and false for exp = [(]).\n
        Note: The drive code prints "balanced" if function return true, otherwise it prints "not balanced".\n
        <b>Input:</b>\n
         {([])}\n
        <b>Output:</b> true\n
        <b>Explanation:</b>\n
        { ( [ ] ) }. Same colored brackets can form balanced pairs, with 0 number of unbalanced bracket.\n
    </string>
    <string name="code_stacks_and_queues_q1">
        <b>C++ CODE:</b>\n
        class Solution{\n
            public:\n
                //Function to check if brackets are balanced or not.\n
                bool ispar(string str){\n
                    stack&lt;char> stk;\n
                    if (str[0] == ")" || str[0] == "}" || str[0] == "]")\n
                        return false;\n
                    if (str.length() % 2 != 0)\n
                        return false;\n
                    for (int i = 0;i&lt;str.length();i++){\n
                        if (str[i] == "(" || str[i] == "{" || str[i] == "[")\n
                            stk.push(str[i]);\n
                        else{\n
                            if (!stk.empty()){\n
                                if ((str[i] == ")" &amp;&amp; stk.top() == "(") || (str[i] == "}" &amp;&amp; stk.top() == "{") || (str[i] == "]" &amp;&amp; stk.top() == "["))\n
                                    stk.pop();\n
                            else\n
                                return false;\n\n
                        }
                        else\n
                            return false;\n
                    }\n
                }\n
                if (stk.empty())\n
                    return true;\n
                return false;\n
                }\n
        };\n\n
        <b>JAVA CODE:</b>
        class Solution{\n
            //Function to check if brackets are balanced or not.\n
            static boolean ispar(String x){\n
                int n=x.length();\n
                Stack&lt;Character> st = new Stack&lt;Character>();\n
                for(int i=0;i&lt;n;i++){\n
                    char ch=x.charAt(i);\n
                    if(ch==")"){\n
                        if(st.size()==0 || st.peek()!="(")return false;\n
                            st.pop();\n
                    }\n
                    else if(ch=="}"){\n
                        if(st.size()==0 || st.peek()!="{")return false;\n
                        st.pop();\n
                    }\n
                    else if(ch=="]"){\n
                        if(st.size()==0 || st.peek()!="[")return false;\n
                        st.pop();\n
                    }\n
                    else{\n
                        st.push(ch);\n
                    }\n
                }\n
                return st.size()==0;\n
            }\n
        }\n
    </string>
    <string name="stacks_and_queues_q2">Question 2:\n
        A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not. A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. Here M[i][i] will always be 0.\n
        Note: Follow 0 based indexing.\n
        <b>Input:</b>\n
        N = 3\n
        M[][] = {{0 1 0},\n
                {0 0 0}, \n
                {0 1 0}}\n
        <b>Output:</b> 1\n
        <b>Explanation:</b>\n
        0th and 2nd person both know 1. Therefore, 1 is the celebrity. \n
    </string>
    <string name="code_stacks_and_queues_q2">
        <b>C++ CODE:</b>
        class Solution{\n
            public:\n
            //Function to find if there is a celebrity in the party or not.\n
            int celebrity(vector&lt;vector&lt;int> >&amp; M, int n){\n
                //  Using stacks\n
                stack&lt;int> st;\n
                for(int i = 0;i&lt;n;i++){\n
                    st.push(i);\n
                }\n

                while(st.size() > 1){\n
                    int a = st.top();\n
                    st.pop();\n
                    int b = st.top();\n
                    st.pop();\n

                    if(M[a][b] == 1){\n
                        st.push(b);\n
                    }\n
                    else{\n
                        st.push(a);\n
                    }\n
                }\n

                int celeb = st.top();\n
                for(int i = 0;i&lt;n;i++){\n
                    if(M[celeb][i] == 1){\n
                        return -1;\n
                    }\n
                }\n
                int knows = 1;\n
                for(int i = 0;i&lt;n;i++){\n
                    if(M[i][celeb] == 1){\n
                        knows++;\n
                    }\n
                }\n
                if(knows != n){\n
                    return -1;\n
                }\n
                return celeb;\n
            }\n
        };\n
        <b>JAVA CODE:</b>
        class Solution{\n
            //Function to find if there is a celebrity in the party or not.\n
            int celebrity(int M[][], int n){\n
                Stack&lt;Integer> stack = new Stack&lt;>();\n
                for(int i = 0; i&lt; n;i++){\n
                    stack.push(i);\n
                }\n

                while(stack.size() > 1){\n
                    int a = stack.pop();\n
                    int b = stack.pop();\n
                    if(M[a][b] == 1){\n
                        stack.push(b);\n
                    }else{\n
                        stack.push(a);\n
                    }\n
                }\n
                int celeb = stack.peek();\n
                for(int i = 0; i &lt; n ;i++){\n
                    if(M[celeb][i] == 1){\n
                        return -1;\n
                    }\n
                }\n
                for(int i = 0; i &lt; n ;i++){\n
                    if(M[i][celeb] == 0 &amp;&amp; i!=celeb){\n
                        return -1;\n
                    }\n
                }\n

                return celeb;\n
            }\n
        }\n
    </string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
</resources>